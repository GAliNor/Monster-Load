{"version":3,"sources":["components/Card/Card.component.jsx","components/Card-list/Card-list.component.jsx","components/Search-box/search-box.component.jsx","components/Custum-button/custum-button.component.jsx","components/Button-list/Buttons-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","chosenCharacter","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","CustumButton","index","value","character","onClick","handleClick","ButtonsList","characters","App","e","setState","searchField","target","handleChangeCharacter","state","fetch","then","response","json","users","catch","error","console","log","this","monstersFiltered","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yWAGaA,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBACKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,mBAAqDJ,EAAMK,gBAAgBD,GAA3E,iBACHE,IAAI,iCAET,4BAAKN,EAAMG,QAAQI,MACnB,2BAAIP,EAAMG,QAAQK,UCNbC,EAAW,SAAAT,GAAK,OACzB,yBAAKC,UAAU,aACTD,EAAMU,SAASC,KAAI,SAAAR,GAAO,OACxB,kBAAC,EAAD,CACIS,IAAKT,EAAQC,GACbD,QAASA,EACTE,gBAAiBL,EAAMK,uBCN1BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCLLG,G,YAAgB,SAAAlB,GAAK,OAC9B,2BACIgB,KAAK,SACLf,UAAU,MACVG,GAAIJ,EAAMmB,MAAM,EAChBC,MAAOpB,EAAMqB,UACbC,QAAStB,EAAMuB,gBCJVC,EAAc,SAAAxB,GAAK,OAC5B,yBAAKC,UAAU,WACRD,EAAMyB,WAAWd,KAAI,SAACU,EAAWF,GAAZ,OACpB,kBAAC,EAAD,CACIP,IAAKO,EAAM,EACXA,MAAOA,EACPE,UAAWA,EACXE,YAAavB,EAAMuB,mBCkDpBG,E,kDAtDb,aAAe,IAAD,8BAEZ,gBAYFX,aAAe,SAACY,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOV,SAf1B,EAkBdW,sBAAwB,SAACJ,GACpBA,EAAEG,OAAO1B,GAAK,GAAKuB,EAAEG,OAAO1B,IAAM,GAAK,EAAK4B,MAAMP,WAAWE,EAAEG,OAAO1B,GAAK,KAAOuB,EAAEG,OAAOV,OAC5F,EAAKQ,SAAS,CAACvB,gBAAkB,CAACD,GAAIuB,EAAEG,OAAO1B,GAAIY,KAAOW,EAAEG,OAAOV,UAhBrE,EAAKY,MAAQ,CACXtB,SAAW,GACXe,WAAa,CAAC,SAAU,WAAY,cAAe,OAAQ,oBAC3DpB,gBAAkB,CAACD,GAAK,EAAGY,KAAO,UAClCa,YAAc,IARJ,E,gEAuBM,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAClB,SAAW2B,OACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAGtB,IAAD,EAE2BG,KAAKV,MAA/BtB,EAFD,EAECA,SAAUmB,EAFX,EAEWA,YACdc,EAAmBjC,EAASkC,QAAO,SAAAzC,GAAO,OAAIA,EAAQI,KAAKsC,cAAcC,SAASjB,EAAYgB,kBAElG,OACE,yBAAK5C,UAAU,OACb,2CACA,kBAAC,EAAD,CACEa,YAAY,eACZC,aAAc2B,KAAK3B,eAErB,kBAAC,EAAD,CACEU,WAAYiB,KAAKV,MAAMP,WACvBF,YAAamB,KAAKX,wBAEpB,kBAAC,EAAD,CACErB,SAAUiC,EACVtC,gBAAiBqC,KAAKV,MAAM3B,uB,GAlDpB0C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.e9577ef4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.style.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img\r\n             src={`https://robohash.org/${props.monster.id}?set=set${props.chosenCharacter.id}&size=180x180`}\r\n             alt=\"{props.chosenCharacter.type}\"\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React, { Component } from 'react';\r\nimport './Card-list.style.css';\r\nimport { Card } from '../Card/Card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        { props.monsters.map(monster => (\r\n            <Card \r\n                key={monster.id} \r\n                monster={monster} \r\n                chosenCharacter={props.chosenCharacter}\r\n            />\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange} \r\n    />\r\n);","import React from 'react';\r\n\r\nimport './custum-button.style.css';\r\n\r\nexport const CustumButton =  props => (\r\n    <input \r\n        type=\"button\"\r\n        className=\"btn\"\r\n        id={props.index+1}\r\n        value={props.character}\r\n        onClick={props.handleClick}\r\n    />\r\n);","import React from 'react';\r\n\r\nimport './Buttons-list.style.css';\r\n\r\nimport { CustumButton } from '../Custum-button/custum-button.component';\r\n\r\nexport const ButtonsList = props => (\r\n    <div className=\"btnList\">\r\n          {props.characters.map((character, index) => (\r\n            <CustumButton \r\n                key={index+1}\r\n                index={index}\r\n                character={character}\r\n                handleClick={props.handleClick}\r\n            />\r\n          ))}\r\n    </div>\r\n);","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/Card-list/Card-list.component';\nimport { SearchBox } from './components/Search-box/search-box.component';\nimport { ButtonsList } from './components/Button-list/Buttons-list.component';\n\nclass App extends Component {\n\n  constructor() {\n\n    super();\n\n    this.state = {\n      monsters : [],\n      characters : ['Robots', 'Monsters', 'Robot Heads', 'Cats', 'Human Technicien'],\n      chosenCharacter : {id : 1, type : 'Robots'},\n      searchField : ''\n    }\n\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value})\n  }\n\n  handleChangeCharacter = (e) => { \n    if(e.target.id > 0 && e.target.id <= 5 && this.state.characters[e.target.id - 1] === e.target.value)\n      this.setState({chosenCharacter : {id: e.target.id, type : e.target.value}})\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters : users}))\n      .catch(error => console.log(error));\n  }\n  \n  render() {\n\n    const { monsters, searchField } = this.state;\n    var monstersFiltered = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Robots load</h1>\n        <SearchBox\n          placeholder=\"Search Robot\"\n          handleChange={this.handleChange}\n        />\n        <ButtonsList \n          characters={this.state.characters}\n          handleClick={this.handleChangeCharacter}\n        />\n        <CardList \n          monsters={monstersFiltered}\n          chosenCharacter={this.state.chosenCharacter}\n        />\n      </div>\n    );}\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}